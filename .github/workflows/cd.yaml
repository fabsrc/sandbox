name: Build & Deploy

on:
  push:
    branches:
      - "main"
    tags:
      - "v*"

jobs:
  deploy-new:
    name: deploy-new
    runs-on: ubuntu-latest
    environment: new
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: env
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - uses: actions/github-script@v7
        id: previous-deploy
        with:
          result-encoding: string
          retries: 3
          script: |
            const query = `query getLatestDeployments($owner: String!, $name: String!, $environment: String!) {
              repository(owner: $owner, name: $name) {
                id
                deployments(environments: [$environment], last: 20) {
                  nodes {
                    id
                    state
                    createdAt
                    commitOid
                  }
                }
              }
            }`;
            const variables = {
              owner: context.repo.owner,
              name: context.repo.repo,
              environment: "new"
            };
            const result = await github.graphql(query, variables);

            const activeDeployment = result.repository.deployments.nodes.find(deployment => deployment.state === "ACTIVE");
            const sha = activeDeployment?.commitOid;
            const firstSha = "f4749d7f252b1d0f275811c5ebc9020dc73d11ab";

            // Check if previousd deploy commit is still part of the branch
            if (sha) {
              const { data: compare } = await github.rest.repos.compareCommitsWithBasehead({
                owner: context.repo.owner,
                repo: context.repo.repo,
                basehead: `${sha}...${{ github.sha }}`,
              });
              
              console.log(compare);

              if (compare.status !== "diverged") {
                return sha;
              }
            }

            return firstSha;
      - run: |
          echo "previous: ${{ steps.previous-deploy.outputs.result }}"
          git diff ${{ steps.previous-deploy.outputs.result }}
